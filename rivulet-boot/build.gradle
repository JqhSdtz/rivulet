import org.yaml.snakeyaml.Yaml

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    dependencies {
        classpath 'org.yaml:snakeyaml:2.0'
        classpath 'org.liquibase:liquibase-gradle-plugin:3.0.1'
        classpath 'org.liquibase:liquibase-core:4.31.0'
        classpath 'org.postgresql:postgresql:42.7.2'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
//    id 'org.graalvm.plugin.compiler' version '0.1.0-alpha2'
    id 'org.liquibase.gradle' version '3.0.1'
}

apply plugin: 'org.liquibase.gradle'

//graal {
//    version '22.2.0'
//}

group = 'org.laputa'
version = '0.0.1-SNAPSHOT'

//def app = new Yaml().loadAll(new File("$projectDir/src/main/resources/application.yml").newInputStream()).first()
def appKeys = new Yaml().loadAll(new File("$projectDir/src/main/resources/application-key.yml").newInputStream()).first()

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    liquibaseRuntime.extendsFrom runtimeClasspath
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    maven { url file('../library') }
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    mavenCentral()
}

diff.dependsOn compileJava
diffChangelog.dependsOn compileJava
generateChangelog.dependsOn compileJava

def dialect = appKeys.spring.jpa.properties.hibernate.dialect
def physicalNamingStrategy = '&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
def implicitNamingStrategy = '&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
def changelogFilePath = 'src/main/resources/changelog/master.yml'
def referenceUrlStr = 'hibernate:spring:org.laputa.rivulet'
referenceUrlStr += '?hibernate.temp.use_jdbc_metadata_defaults=false'
referenceUrlStr += '&dialect=' + dialect + physicalNamingStrategy + implicitNamingStrategy

// liquibase升级导致一些参数名改变，参考https://github.com/liquibase/liquibase-gradle-plugin/blob/master/doc/releases.md
liquibase {
    activities.register('main') {
        arguments = [
                'changelogFile'  : changelogFilePath,
                'url'            : appKeys.spring.datasource.url,
                'username'       : appKeys.spring.datasource.username,
                'password'       : appKeys.spring.datasource.password,
                'driver'         : appKeys.spring.datasource['driver-class-name'],
                'referenceUrl'   : referenceUrlStr,
                'referenceDriver': 'liquibase.ext.hibernate.database.connection.HibernateDriver',
                'logLevel'       : 'WARNING'
        ]
    }
}

dependencies {
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate6:2.18.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
//    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.session:spring-session-core:3.4.1'
    implementation 'org.springframework.session:spring-session-data-redis:3.4.1'
    implementation 'org.postgresql:postgresql:42.7.2'
//    implementation 'com.alibaba:druid-spring-boot-3-starter:1.2.24'
    implementation 'org.redisson:redisson-spring-boot-starter:3.44.0'
    implementation 'org.liquibase:liquibase-core:4.31.1'
    implementation 'org.liquibase.ext:liquibase-hibernate6:4.31.0-SNAPSHOT'
//    springboot jpa中的hibernate还是6.6.5，所以这里版本也设置为6.6.5
    implementation 'org.hibernate:hibernate-envers:6.6.5.Final'
    implementation 'org.hibernate.orm:hibernate-jcache:6.6.5.Final'
    implementation "org.ehcache:ehcache:3.10.8"
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.6.1.202309021850-r'
    implementation 'cn.hutool:hutool-core:5.8.35'
    implementation 'cn.hutool:hutool-crypto:5.8.35'
    implementation 'cn.hutool:hutool-extra:5.8.35'
    implementation 'com.google.guava:guava:33.4.0-jre'
    implementation 'org.apache.commons:commons-pool2:2.11.1'
    implementation 'org.reflections:reflections:0.10.2'
    implementation "org.graalvm.sdk:graal-sdk:24.1.2"
    implementation 'org.graalvm.truffle:truffle-api:24.1.2'
    implementation "org.graalvm.js:js:24.1.2"
    implementation "jakarta.persistence:jakarta.persistence-api:3.1.0"
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.1'
//    implementation 'org.liquibase.gradle:org.liquibase.gradle.gradle.plugin:3.0.0'
    compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

dependencies {
    liquibaseRuntime 'org.liquibase:liquibase-core:4.31.0'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'
    liquibaseRuntime 'org.postgresql:postgresql:42.7.2'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.2'
    liquibaseRuntime 'org.hibernate:hibernate-core:6.6.5.Final'
    liquibaseRuntime 'info.picocli:picocli:4.6.3'
    liquibaseRuntime('org.liquibase.ext:liquibase-hibernate6:4.31.0-SNAPSHOT') {
        exclude group: 'org.liquibase', module: 'liquibase-test-harness'
    }
    liquibaseRuntime sourceSets.main.output
}

tasks.named('test') {
    useJUnitPlatform()
}

def currentTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern('yyyy-MM-dd HH.mm.ss.SSS'))

def targetNames = ['diffChangelog', 'generateChangelog']
tasks.findAll { it ->
    if (it.name in targetNames) {
        return it
    }
}.each { it ->
    // 在生成新的changeLog之前清空旧的changeLog
    it.doFirst {
        def changelogFile = new File(changelogFilePath)
        if (changelogFile.exists()) {
            def fileWrite = new FileWriter(changelogFile)
            fileWrite.write("")
            fileWrite.flush()
            fileWrite.close()
        }
    }
    // 生成changeLog后，在history目录下复制一份作为记录
    it.doLast {
        copy {
            from changelogFilePath
            into 'src/main/resources/changelog/history'
            rename {
                currentTime + '.yml'
            }
        }
    }
}
